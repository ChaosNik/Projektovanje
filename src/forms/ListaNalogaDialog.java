/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import data.dao.DAOFactory;
import data.dto.AdminDTO;
import data.dto.BlagajnikDTO;
import data.dto.KonkursniRadnikDTO;
import data.dto.MjestoPrebivalistaDTO;
import static forms.KonkursniRadnikForm.pozoviOptionPane;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DulleX
 */
public class ListaNalogaDialog extends javax.swing.JDialog {

    /**
     * Creates new form TabelaNalogaDialog
     */
    public ListaNalogaDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        vrstaCombo.addItem("Administrator");
        vrstaCombo.addItem("Konkursni radnik");
        vrstaCombo.addItem("Blagajnik");

        vrstaCombo.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        vrstaCombo = new javax.swing.JComboBox<>();
        izbrisiButton = new javax.swing.JButton();
        izmijeniButton = new javax.swing.JButton();
        aktivirajButton = new javax.swing.JButton();
        nazadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nalozi");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Korisničko ime", "Ime", "Prezime", "JMB", "Datum kreiranja naloga", "Aktivan nalog"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabela);

        vrstaCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                vrstaComboItemStateChanged(evt);
            }
        });

        izbrisiButton.setText("Izbriši nalog");
        izbrisiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izbrisiButtonActionPerformed(evt);
            }
        });

        izmijeniButton.setText("Izmijeni podatke naloga");
        izmijeniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izmijeniButtonActionPerformed(evt);
            }
        });

        aktivirajButton.setText("Aktiviraj/Deaktiviraj nalog");
        aktivirajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aktivirajButtonActionPerformed(evt);
            }
        });

        nazadButton.setText("Nazad");
        nazadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nazadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vrstaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(izbrisiButton)
                        .addGap(18, 18, 18)
                        .addComponent(izmijeniButton)
                        .addGap(27, 27, 27)
                        .addComponent(aktivirajButton))
                    .addComponent(nazadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vrstaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(izbrisiButton)
                    .addComponent(izmijeniButton)
                    .addComponent(aktivirajButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(nazadButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void vrstaComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_vrstaComboItemStateChanged
        ucitaj();
    }//GEN-LAST:event_vrstaComboItemStateChanged

    private void ucitaj() {
        DefaultTableModel model;
        model = (DefaultTableModel) tabela.getModel();

        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }

        if ((vrstaCombo.getSelectedItem()).equals("Administrator")) {
            List<AdminDTO> admini = DAOFactory.getDAOFactory().getAdminDAO().admini();

            for (AdminDTO admin : admini) {
                String pom = "";
                if (admin.isValidanNalog()) {
                    pom = "Da";
                } else {
                    pom = "Ne";
                }
                Object[] row = {admin.getUsername(), admin.getIme(), admin.getPrezime(), admin.getJMB(), admin.getDatumKreiranjaNaloga(), pom};

                model = (DefaultTableModel) tabela.getModel();

                model.addRow(row);
            }
        } else if (vrstaCombo.getSelectedItem().equals("Konkursni radnik")) {
            List<KonkursniRadnikDTO> radnici = DAOFactory.getDAOFactory().getKonkursniRadnikDAO().konkursniRadnici();

            for (KonkursniRadnikDTO radnik : radnici) {
                String pom = "";
                if (radnik.isValidanNalog()) {
                    pom = "Da";
                } else {
                    pom = "Ne";
                }
                Object[] row = {radnik.getUsername(), radnik.getIme(), radnik.getPrezime(), radnik.getJMB(), radnik.getDatumKreiranjaNaloga(), pom};

                model = (DefaultTableModel) tabela.getModel();

                model.addRow(row);
            }
        } else if (vrstaCombo.getSelectedItem().equals("Blagajnik")) {
            List<BlagajnikDTO> blagajnici = DAOFactory.getDAOFactory().getBlagajnikDAO().blagajnici();

            for (BlagajnikDTO blagajnik : blagajnici) {
                String pom = "";
                if (blagajnik.isValidanNalog()) {
                    pom = "Da";
                } else {
                    pom = "Ne";
                }
                Object[] row = {blagajnik.getUsername(), blagajnik.getIme(), blagajnik.getPrezime(), blagajnik.getJMB(), blagajnik.getDatumKreiranjaNaloga(), pom};

                model = (DefaultTableModel) tabela.getModel();

                model.addRow(row);
            }
        }
    }

    private void izbrisiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izbrisiButtonActionPerformed

        int row = tabela.getSelectedRow();
        if (row != -1) {
            int column = 0;
            String username = tabela.getModel().getValueAt(row, column).toString();

            String vrsta = (String) vrstaCombo.getSelectedItem();
            if (vrsta.equals("Administrator")) {
                boolean flag = DAOFactory.getDAOFactory().getAdminDAO().obrisiAdmina(username);
                if (flag) {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Izbrisan je nalog  " + username, "Uspješno", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Nije moguće izvršiti brisanje naloga.", "Greška!", JOptionPane.ERROR_MESSAGE);
                }

            } else if (vrsta.equals("Konkursni radnik")) {
                boolean flag = DAOFactory.getDAOFactory().getKonkursniRadnikDAO().obrisiKonkursnogRadnika(username);
                if (flag) {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Izbrisan je nalog  " + username, "Uspješno", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Nije moguće izvršiti brisanje naloga.", "Greška!", JOptionPane.ERROR_MESSAGE);
                }
            } else if (vrsta.equals("Blagajnik")) {
                boolean flag = DAOFactory.getDAOFactory().getBlagajnikDAO().obrisiBlagajnika(username);
                if (flag) {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Izbrisan je nalog  " + username, "Uspješno", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Nije moguće izvršiti brisanje naloga.", "Greška!", JOptionPane.ERROR_MESSAGE);
                }
            }
            ucitaj();
        } else {
            KonkursniRadnikForm.pozoviOptionPane(this, "Morate izabrati korisnika u tabeli.", "Greška!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_izbrisiButtonActionPerformed

    private void nazadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nazadButtonActionPerformed
        new AdminForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_nazadButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        new AdminForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void izmijeniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izmijeniButtonActionPerformed
        String vrsta = (String) vrstaCombo.getSelectedItem();

        int row = tabela.getSelectedRow();
        if (row != -1) {
            int column = 0;
            String username = tabela.getModel().getValueAt(row, column).toString();

            if (vrsta.equals("Administrator")) {
                AdminDTO admin = DAOFactory.getDAOFactory().getAdminDAO().admin(username);
                new IzmijeniNalogDialog(new java.awt.Frame(), true, admin).setVisible(true);
                this.dispose();
            } else if (vrsta.equals("Konkursni radnik")) {
                KonkursniRadnikDTO radnik = DAOFactory.getDAOFactory().getKonkursniRadnikDAO().konkursniRadnik(username);
                new IzmijeniNalogDialog(new java.awt.Frame(), true, radnik).setVisible(true);
                this.dispose();
            } else if (vrsta.equals("Blagajnik")) {
                BlagajnikDTO blagajnik = DAOFactory.getDAOFactory().getBlagajnikDAO().blagajnik(username);
                new IzmijeniNalogDialog(new java.awt.Frame(), true, blagajnik).setVisible(true);
                this.dispose();
            }

        } else {
            KonkursniRadnikForm.pozoviOptionPane(this, "Morate izabrati korisnika u tabeli.", "Greška!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_izmijeniButtonActionPerformed

    private void aktivirajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aktivirajButtonActionPerformed
        String vrsta = (String) vrstaCombo.getSelectedItem();

        int row = tabela.getSelectedRow();
        if (row != -1) {
            int column = 0;
            String username = tabela.getModel().getValueAt(row, column).toString();
            if (vrsta.equals("Administrator")) {
                AdminDTO admin = DAOFactory.getDAOFactory().getAdminDAO().admin(username);
                if (admin.isValidanNalog()) {
                    admin.setValidanNalog(false);
                } else {
                    admin.setValidanNalog(true);
                }
                boolean flag = DAOFactory.getDAOFactory().getAdminDAO().azurirajAdmina(admin, admin.getUsername());
                if (flag) {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Uspješna promjena stanja naloga " + admin.getUsername(), "", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Nije moguće promjeniti stanje naloga.", "Greška!", JOptionPane.ERROR_MESSAGE);
                }
            } else if (vrsta.equals("Konkursni radnik")) {
                KonkursniRadnikDTO radnik = DAOFactory.getDAOFactory().getKonkursniRadnikDAO().konkursniRadnik(username);
                if (radnik.isValidanNalog()) {
                    radnik.setValidanNalog(false);
                } else {
                    radnik.setValidanNalog(true);
                }
                boolean flag = DAOFactory.getDAOFactory().getKonkursniRadnikDAO().azurirajKonkursnogRadnika(radnik, radnik.getUsername());
                if (flag) {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Uspješna promjena stanja naloga " + radnik.getUsername(), "", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Nije moguće promjeniti stanje naloga.", "Greška!", JOptionPane.ERROR_MESSAGE);
                }
            } else if (vrsta.equals("Blagajnik")) {
                BlagajnikDTO blagajnik = DAOFactory.getDAOFactory().getBlagajnikDAO().blagajnik(username);
                if (blagajnik.isValidanNalog()) {
                    blagajnik.setValidanNalog(false);
                } else {
                    blagajnik.setValidanNalog(true);
                }
                boolean flag = DAOFactory.getDAOFactory().getBlagajnikDAO().azurirajBlagajnika(blagajnik, blagajnik.getUsername());
                if (flag) {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Uspješna promjena stanja naloga " + blagajnik.getUsername(), "", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    KonkursniRadnikForm.pozoviOptionPane(this, "Nije moguće promjeniti stanje naloga.", "Greška!", JOptionPane.ERROR_MESSAGE);
                }
            }
            ucitaj();
        } else {
            KonkursniRadnikForm.pozoviOptionPane(this, "Morate izabrati korisnika u tabeli.", "Greška!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_aktivirajButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaNalogaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaNalogaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaNalogaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaNalogaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ListaNalogaDialog dialog = new ListaNalogaDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aktivirajButton;
    private javax.swing.JButton izbrisiButton;
    private javax.swing.JButton izmijeniButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nazadButton;
    private javax.swing.JTable tabela;
    private javax.swing.JComboBox<String> vrstaCombo;
    // End of variables declaration//GEN-END:variables
}
